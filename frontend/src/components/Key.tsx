/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    keycap: THREE.Mesh;
  };
  materials: {};
};

export default function Model(
  props: JSX.IntrinsicElements["group"] & { position: [number, number, number] } 
) {
  const { position, ...restProps } = props;
  const { nodes, materials } = useGLTF("./keycap.glb") as GLTFResult;

  return (
    <group position={position} {...restProps} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        scale={[0.1, 0.1, 0.1]}
        geometry={nodes.keycap.geometry}
        material={nodes.keycap.material}
        rotation={[Math.PI / 2, 0, 0]}
      >
        <meshStandardMaterial attach="material" color="hotpink" />
      </mesh>
    </group>
  );
}

useGLTF.preload("/keycap.glb");
